@startuml
actor Cliente
participant "PrestamoController" as PC
participant "Prestamos: Prestamo" as P
participant "Prestamo: PrestamoPersonal" as PP
participant "ClienteController" as CC
participant "Cliente" as C
participant "CajaAhorro" as CA
participant "Operacion" as O

Cliente -> PC: pagarCuotaPrestamoPersonal(nroPrestamo)
activate PC

' Buscar préstamo (loop y opt)
loop cada préstamo<listaPrestamos>


    opt si nroPrestamo coincide
        PC -> P: getNroPrestamo()
        activate P
        PC <-- P: Return Prestamo
        deactivate P
    end
end
PC -> PP: getCliente(Cliente)
activate PP
PP -> PC: Cliente
deactivate PP

'getCuotasRestantes
opt si cuotasRestantes > 0
    PC -> PP: getCuotasRestantes()
    activate PP
    PP --> PC: cuotasRestantes
    deactivate PP
end

' Obtener valor de la cuota
PC -> PP: getValorCuota()
activate PP
PC <-- PP: valorCuota
deactivate PP
' Obtener cliente


' Obtener caja de ahorro
PC -> C: getCajaAhorro()
activate C
C --> PC: CajaAhorro
deactivate C


' Crear operación de pago de cuota
PC -> O: Operacion(fecha, tipoOperacion EXTRACCION, valorCuota)
activate O
' Registrar operación
O --> PC: Operacion Registrada
deactivate O

'setCuotasRestantes(getCuotasRestantes--)
'importante porque se actualiza el nro de cuotas restantes
'como es un set no devuelve nada

PC -> PP: setCuotasRestantes(cuotasRestantes - 1)
activate PP
deactivate PP

' Debitar dinero
PC -> CA: debitarSaldoCajaAhorro(valorCuota)
activate CA
' Crear operación y registrar
PC -> CA: registrarOperacion(Operacion)
deactivate CA

PC --> Cliente: Cuota pagada
deactivate PC
@enduml