@startuml
actor Cliente
participant "PrestamoController" as PC
participant "PrestamoHipotecario" as PH
participant "ClienteController" as CC
participant "Clientes: Cliente" as C
participant "ClienteEncontrado: Cliente" as CE
participant "PrestamoHipotecario" as PH
participant "Operacion" as O
participant "CajaAhorro" as CA

Cliente -> PC: AltaPrestamoHipotecario(nroCliente, monto, plazo, tasa, nroClienteGarante)


activate PC
PC -> CC: buscarClientePorNro(nroCliente)
activate CC
' Buscar cliente solicitante (loop y opt)
loop por cada cliente en listadoClientes
    opt si nroCliente coincide
        CC -> C: getNroCliente()
        activate C
        CC <-- C: Cliente
        deactivate C
    end
end
CC -> PC: Cliente encontrado
deactivate CC

PC -> CC: buscarCliente(nroClienteGarante)
activate CC
' Buscar cliente garante (loop y opt)
loop por cada cliente en listadoClientes
    opt si nroCliente coincide
        CC -> C: getNroCliente()
        activate C
        CC <-- C: Cliente (Garante)
        deactivate C
    end
end
CC -> PC: Cliente encontrado
deactivate CC

PC -> PH: <<Create>> PrestamoHipotecario(nroPrestamo, plazo, C, monto, tasa, CG)
activate PH
PC <-- PH: PrestamoHipotecario
deactivate PH

PC -> CE: getCajaAhorro(nroCliente)
activate CE
CE --> PC: CajaAhorro
deactivate CE

PC -> CA: acreditarSaldo(saldo - gastosOperativos)
activate CA
CA --> PC: CajaAhorro actualizada
deactivate CA

PC -> O: <<create>> Operacion(fecha, INGRESO, monto - gastosNotariales)
activate O
O --> PC: Operacion Registrada
deactivate O

PC -> CA: registrarOperacionCajaAhorro(Operacion)
activate CA
CA --> PC: Operacion registrada en CajaAhorro
deactivate CA
deactivate C

PC --> Cliente: pr√©stamo hipotecario emitido
deactivate PC
@enduml